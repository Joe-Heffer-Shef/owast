# Development environment
# Mock the Azure environment
services:

  # Emulator for Azure Blob Storage
  blob:
    image: mcr.microsoft.com/azure-storage/azurite

  # Emulator for Azure Cosmo DB document-store (NoSQL) database.
  # There is also an emulator for the Azure service, which currently only supports the SQL API:
  # https://docs.microsoft.com/en-us/azure/cosmos-db/linux-emulator?tabs=ssl-netstd21
  # This has more of the features of the real Azure service
  meta:
    image: mongo
    volumes:
      # Import scripts
      - ./meta:/meta

  # Web interface to view the MongoDB instance
  meta-admin:
    image: mongo-express
    ports:
      - "81:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=meta
    depends_on:
      - meta
    restart: always

  # Web app for data entry user interface
  app:
    build:
      context: .
      dockerfile: owast/Dockerfile
    volumes:
      # Allow editing of files without rebuilding images
      - ./owast:/opt/owast/owast
      - ./meta:/opt/owast/meta
    env_file:
      - owast/.env
    environment:
      - FLASK_ENV=development
      - MONGO_URI=mongodb://meta:27017/owast
      - BLUEPRINTS_DIR=owast/blueprints
      # Gunicorn options
      # https://docs.gunicorn.org/en/stable/settings.html#settings
      - WSGI_APP=owast.app_factory:create_app()
      - GUNICORN_CMD_ARGS=--log-level debug --user www-data --group www-data --reload True --chdir /opt/owast --bind 0.0.0.0 --timeout 600 --config owast/gunicorn.conf.py
      # Blob storage settings
      - BLOB_CONN_STR=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://blob:10000/devstoreaccount1;
    restart: always

  # Web server
  proxy:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/owast.conf:/etc/nginx/conf.d/owast.conf

  # Mock Active Directory
  #auth:
  #  image: bitnami/openldap:2.4
